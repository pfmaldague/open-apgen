/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _APVALUE_H_RPCGEN
#define _APVALUE_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>

 #include <unistd.h>
 #include <string.h>

enum apvaltype {
	AP_INT = 0,
	AP_FLOAT = 1,
	AP_BOOL = 2,
	AP_TIME = 3,
	AP_DURATION = 4,
	AP_STRING = 5,
	AP_INSTANCE = 6,
	AP_ARRAY = 7,
	AP_STRUCT = 8,
	AP_UNDEFINED = 9,
};
typedef enum apvaltype apvaltype;
#ifdef __cplusplus
extern "C" bool_t xdr_apvaltype(XDR *, apvaltype*);
#elif __STDC__
extern  bool_t xdr_apvaltype(XDR *, apvaltype*);
#else /* Old Style C */
bool_t xdr_apvaltype();
#endif /* Old Style C */


enum aptag {
	AP_NONE = 0,
	AP_ARRAY_STYLE = 1,
	AP_STRUCT_STYLE = 2,
};
typedef enum aptag aptag;
#ifdef __cplusplus
extern "C" bool_t xdr_aptag(XDR *, aptag*);
#elif __STDC__
extern  bool_t xdr_aptag(XDR *, aptag*);
#else /* Old Style C */
bool_t xdr_aptag();
#endif /* Old Style C */


struct apindex {
	aptag tag;
	union {
		int x;
		char *s;
	} apindex_u;
};
typedef struct apindex apindex;
#ifdef __cplusplus
extern "C" bool_t xdr_apindex(XDR *, apindex*);
#elif __STDC__
extern  bool_t xdr_apindex(XDR *, apindex*);
#else /* Old Style C */
bool_t xdr_apindex();
#endif /* Old Style C */


struct apvalue {
	apvaltype type;
	union {
		int64_t asInt;
		double asFloat;
		bool_t asBool;
		int64_t asTime;
		int64_t asDuration;
		char *asString;
		char *asInstance;
	} apvalue_u;
};
typedef struct apvalue apvalue;
#ifdef __cplusplus
extern "C" bool_t xdr_apvalue(XDR *, apvalue*);
#elif __STDC__
extern  bool_t xdr_apvalue(XDR *, apvalue*);
#else /* Old Style C */
bool_t xdr_apvalue();
#endif /* Old Style C */


struct aparrayelement {
	apvalue content;
	apindex indx;
	int apid;
	int parent;
};
typedef struct aparrayelement aparrayelement;
#ifdef __cplusplus
extern "C" bool_t xdr_aparrayelement(XDR *, aparrayelement*);
#elif __STDC__
extern  bool_t xdr_aparrayelement(XDR *, aparrayelement*);
#else /* Old Style C */
bool_t xdr_aparrayelement();
#endif /* Old Style C */


struct aparray {
	struct {
		u_int apvector_len;
		aparrayelement *apvector_val;
	} apvector;
};
typedef struct aparray aparray;
#ifdef __cplusplus
extern "C" bool_t xdr_aparray(XDR *, aparray*);
#elif __STDC__
extern  bool_t xdr_aparray(XDR *, aparray*);
#else /* Old Style C */
bool_t xdr_aparray();
#endif /* Old Style C */


#define PRINTVAL ((rpc_uint)200001)
#define PRINTVAL_V0 ((rpc_uint)0)

#ifdef __cplusplus
#define PRINT_NOTHING ((rpc_uint)1)
extern "C" void * print_nothing_0(void *, CLIENT *);
extern "C" void * print_nothing_0_svc(void *, struct svc_req *);

#elif __STDC__
#define PRINT_NOTHING ((rpc_uint)1)
extern  void * print_nothing_0(void *, CLIENT *);
extern  void * print_nothing_0_svc(void *, struct svc_req *);

#else /* Old Style C */
#define PRINT_NOTHING ((rpc_uint)1)
extern  void * print_nothing_0();
extern  void * print_nothing_0_svc();
#endif /* Old Style C */
#define PRINTVAL_V1 ((rpc_uint)1)

#ifdef __cplusplus
#define PRINT_VALUE ((rpc_uint)1)
extern "C" char ** print_value_1(apvalue *, CLIENT *);
extern "C" char ** print_value_1_svc(apvalue *, struct svc_req *);
#define PRINT_ARRAY ((rpc_uint)2)
extern "C" char ** print_array_1(aparray *, CLIENT *);
extern "C" char ** print_array_1_svc(aparray *, struct svc_req *);

#elif __STDC__
#define PRINT_VALUE ((rpc_uint)1)
extern  char ** print_value_1(apvalue *, CLIENT *);
extern  char ** print_value_1_svc(apvalue *, struct svc_req *);
#define PRINT_ARRAY ((rpc_uint)2)
extern  char ** print_array_1(aparray *, CLIENT *);
extern  char ** print_array_1_svc(aparray *, struct svc_req *);

#else /* Old Style C */
#define PRINT_VALUE ((rpc_uint)1)
extern  char ** print_value_1();
extern  char ** print_value_1_svc();
#define PRINT_ARRAY ((rpc_uint)2)
extern  char ** print_array_1();
extern  char ** print_array_1_svc();
#endif /* Old Style C */

#endif /* !_APVALUE_H_RPCGEN */
