apgen version "foo"


resource OKtoObserve: state integer
    begin
	parameters
		value: integer default to 1 ;
	states
		0,1;
	profile
		0;
	usage
		value;
    end resource OKtoObserve

resource ObsInProgress: state boolean
    begin
	parameters
		value: boolean default to true ;
	states
		false, true;
	profile
		false;
	usage
		value;
    end resource ObsInProgress

resource ObsDecompInProgress: state boolean
    begin
	parameters
		value: boolean default to true ;
	states
		false, true;
	profile
		false;
	usage
		value;
    end resource ObsDecompInProgress

activity type ObsOpportunity;

activity type DefineOpportunities
    begin
	attributes
		"Color" = "Dodger Blue";
		"Pattern" = 13 ;
		"Duration" = Duration ;
		"Legend" = "VIEW PERIODS";
	parameters
		Duration: duration default to 2:00:00;
		how_many: integer default to 10;
 	decomposition
		i: integer default to 0;
		t: time default to start;
		while( i < how_many )
			{
			ObsOpportunity(Duration * random()) at t ;
			t = t + 12:00:00 ;
			i = i + 1 ;
			}
    end activity type DefineOpportunities

activity type ObsOpportunity
    begin
	attributes
		"Color" = "Orange Red" ;
		"Pattern" = 56 ;
		"Duration" = Duration ;
		"Legend" = "VIEW PERIODS";
	parameters
		Duration: duration default to 2:00:00;
	resource usage
		if(is_frozen("OKtoObserve") == false)
			{
			use OKtoObserve( 1 ) ;
			}
		else
			{
			write_to_stdout("resource OKtoObserve is frozen...\n");
			}
    end activity type ObsOpportunity

activity type ObsSimple
    begin
	common_variable: float default to 0.0;
	attributes
		"Color" = "Aquamarine" ;
		"Pattern" = 49 ;
		"Duration" = Duration ;
		"Legend" = "Pictures";
		"Decomposition Suffix" = "One_Picture" ;
	parameters
		Duration: duration default to 4:00 ;
		theColor: string default to "Aquamarine";
	creation
		write_to_stdout(now, " ", id, " creation starts\n");
		common_variable = 2.3;
	modeling
		write_to_stdout(now, " ", id, " modeling starts\n");
		check: float default to 1.0 / common_variable;
		Color = theColor;
		use ObsInProgress(true) from start to finish ;
		wait for span;
		write_to_stdout(now, " ", id, " modeling ends\n");
    end activity type ObsSimple

activity type ObsDecomp
    begin
	common_variable: float default to 0.0;
	attributes
		"Color" = "Aquamarine" ;
		"Pattern" = 49 ;
		"Duration" = Duration ;
		"Legend" = "DecompIntoPictures";
		"Decomposition Suffix" = "One_Decomp_Picture" ;
	parameters
		Duration: duration default to 4:00 ;
		theColor: string default to "Aquamarine";
	creation
		write_to_stdout(now, " ", id, " creation starts\n");
		common_variable = 2.3;
	nonexclusive_decomposition
		spawn("ObsSimple", [30:00, "Purple"]) at start + from_seconds(1.0/common_variable);
	modeling
		write_to_stdout(now, " ", id, " modeling starts\n");
		check: float default to 1.0 / common_variable;
		Color = theColor;
		use ObsDecompInProgress(true) from start to finish ;
		wait for span;
		write_to_stdout(now, " ", id, " modeling ends\n");
    end activity type ObsDecomp

activity type fake_parent
    begin
	attributes
		"Legend" = "Fake Parents";
		"Duration" = D;
		"Color" = C;
	parameters
		D: duration default to 1:00:00;
		C: string default to "Spring Green";
    end activity type fake_parent

activity type decompose_via_windows
    begin
	attributes
		"Color" = "Violet Red";
		"Duration" = 2T00:00:00;
	parameters
		start_looking: time default to now;
		how_long: duration default to 1T00:00:00;
	expansion
		windows: array default to [];
		actual_duration: duration default to 0:0:0;

		get_windows(OKtoObserve.currentval() == 1) for [
			"start" = start_looking,
			"min" = 0:0:1,
			"max" = how_long];
		if(length_of(windows) > 0)
			{
			fake_parent(span, Color) at start;
			}
		i: integer default to 0;
		while(i < length_of(windows))
			{
			write_to_stdout(now, " ", id, " starts decomposing into ObsSimple\n");
			spawn("ObsSimple", [00:30:00, "Spring Green"]) at windows[i];
			spawn("ObsSimple", [00:30:00, "Orange Red"]) at windows[i + 1];
			write_to_stdout(now, " ", id, " done decomposing into ObsSimple\n");
			write_to_stdout(now, " ", id, " starts decomposing into ObsDecomp\n");
			spawn("ObsDecomp", [00:30:00, "Lavender"]) at windows[i] + 1:00:00;
			write_to_stdout(now, " ", id, " done decomposing into ObsDecomp\n");
			wait for 01:00;
			i = i + 2;
			}
    end activity type decompose_via_windows
