apgen version "foo"


resource redMax: consumable float
    begin
	attributes
	    "Units" = "N/A";
	    "Subsystem" = "Alarms";
	    "Interpolation" = true;
	parameters
	    x: float default to 0.0;
	profile
	    0.0;
	usage
	    redMax.currentval() - x;
    end resource redMax

resource yellowMax: consumable float
    begin
	attributes
	    "Units" = "N/A";
	    "Subsystem" = "Alarms";
	    "Interpolation" = true;
	parameters
	    x: float default to 0.0;
	profile
	    0.0;
	usage
	    yellowMax.currentval() - x;
    end resource yellowMax

resource yellowMin: consumable float
    begin
	attributes
	    "Units" = "N/A";
	    "Subsystem" = "Alarms";
	    "Interpolation" = true;
	parameters
	    x: float default to 0.0;
	profile
	    0.0;
	usage
	    yellowMin.currentval() - x;
    end resource yellowMin

resource redMin: consumable float
    begin
	attributes
	    "Units" = "N/A";
	    "Subsystem" = "Alarms";
	    "Interpolation" = true;
	parameters
	    x: float default to 0.0;
	profile
	    0.0;
	usage
	    redMin.currentval() - x;
    end resource redMin

resource consumedFloat: consumable float
    begin
	attributes
	    "Error High" = redMax.currentval();
	    "Warning High" = yellowMax.currentval();
	    "Warning Low" = yellowMin.currentval();
	    "Error Low" = redMin.currentval();
	    "Interpolation" = true;
	    "Auxiliary" = ["redMax", "yellowMax", "yellowMin", "redMin"];
	parameters
	    x: float default to 0.0;
        profile
	    0;
	usage
	    consumedFloat.currentval() - x;
    end resource consumedFloat

activity type adjust_limits
    begin
	attributes
	    "Duration" = 2T00:00:00;
	    "Color" = "Orange Red";
	    "Legend" = "Limits";
	parameters
	    red_max: float default to 4.0;
	    yellow_max: float default to 3.0;
	    yellow_min: float default to -3.0;
	    red_min: float default to -4.0;
	    red_max_rate: float default to 0.02 $ "units per hour";
	    yellow_max_rate: float default to 0.015 $ "units per hour";
	    yellow_min_rate: float default to 0.010 $ "units per hour";
	    red_min_rate: float default to 0.005 $ "units per hour";
	modeling
	    i: integer default to 0;
	    while(i <= 300) {
		hours: float default to (now - start) / 1:00:00;
		use redMax(red_max + red_max_rate * hours);
		use yellowMax(yellow_max + yellow_max_rate * hours);
		use yellowMin(yellow_min + yellow_min_rate * hours);
		use redMin(red_min + red_min_rate * hours);
		wait for span / 300;
		i = i + 1; }
    end activity type adjust_limits

activity type consume_modeling
    begin
	attributes
	    "Duration" = 2T00:00:00;
	    "Color" = "Spring Green";
	    "Legend" = "Consumers";
	parameters
	    offset: float default to 0;
	    amplitude: float default to 5.0;
	modeling
	    i: integer default to 0;

	    while(i <= 300) {
		hours: float default to (now - start) / 1:00:00;
		use consumedFloat(offset + amplitude * sin(0.5 * PI * hours));
		wait for span / 300;
		i = i + 1; }
    end activity type consume_modeling

activity type Int
    begin
	attributes
	    "Color" = theColor;
	    "Duration" = theDuration;
	    "Legend" = theLegend;
	parameters
	    theDuration: duration default to 1:00:00;
	    theColor: string default to "Lavender";
	    theLegend: string default to "A";
    end activity type Int

activity type compute_windows
    begin
	attributes
	    "Color" = "Yellow";
	    "Duration" = Duration;
	    "Legend" = "interval_calc";
	parameters
	    Duration: duration default to 1T00:00:00;
	    theType: string default to "and" range ["and", "or", "minus", "xor"];
	nonexclusive_decomposition
	    windows: array default to [];
	    A_time: array default to [];
	    B_time: array default to [];
	    C_time: array default to [];
	    A_int: array default to [];
	    B_int: array default to [];
	    C_int: array default to [];
	    aval: integer default to 0;
	    ActualDuration: duration default to 0:0:0;

	    get_windows(consumedFloat.currentval() > redMin.currentval()) for ["min" = 0:0:1, "max" = 2T00:00:00, "actual" = ActualDuration];
	    A_time = copy_array(windows);	
	    windows = [];
	    get_windows(consumedFloat.currentval() > yellowMin.currentval()) for ["min" = 0:0:1, "max" = 2T00:00:00, "actual" = ActualDuration];
	    B_time = copy_array(windows);	
	    i: integer default to 0;
	    while(i < length_of(A_time)) {
		aval = to_seconds(A_time[i]) / 60.0;
		A_int[i] = aval;
		aval = to_seconds(A_time[i + 1]) / 60.0;
		A_int[i + 1] = aval;
		Int(A_time[i + 1] - A_time[i], "Lavender", "consFltGTredMin") at A_time[i];
		i = i + 2;
	    }
	    i = 0;
	    while(i < length_of(B_time)) {
		B_time[i] = B_time[i] + 1:00:00;
		aval = to_seconds(B_time[i]) / 60.0;
		B_int[i] = aval;
		i = i + 1;
	    }
	    i = 0;
	    while(i < length_of(B_time)) {
		Int(B_time[i + 1] - B_time[i], "Purple", "consFltGTyMin") at B_time[i];
		i = i + 2;
	    }
	    C_time = intervals(theType, A_time, B_time);
	    C_int = int_intervals(theType, A_int, B_int);
	    i = 0;
	    while(i < length_of(C_time)) {
		Int(C_time[i + 1] - C_time[i], "Hot Pink", theType) at C_time[i];
		i = i + 2;
	    }
	    i = 0;
	    while(i < length_of(C_int)) {
		Int(00:01:00 * (C_int[i + 1] - C_int[i]), "Spring Green", theType) at start + 00:01:00 * C_int[i];
		i = i + 2;
	    }
    end activity type compute_windows
